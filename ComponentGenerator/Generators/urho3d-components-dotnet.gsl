.template 0
echo "processing urho3d-components-dotnet $(switches.topdir?"notopdir")"
function is_primitive(type)
    result = my.type="int"|my.type="float"|my.type="bool"
    return result
endfunction

function is_vector(type)
    return string.prefixed(my.type,"vector")
endfunction

function is_string(type)
    return string.prefixed(my.type,"string")
endfunction

function is_enum(type)
  return my.type="enum"
endfunction

function is_resource_ref(type)
  return my.type="resource_ref"
endfunction

function get_type_name(type)
    echo(my.type)
    if is_primitive(my.type)
        return my.type
    elsif is_vector(my.type) 
        return "$(my.Type)"
    elsif is_string(my.type)
        return "const char*"
    elsif is_enum(my.type)
        return "$(enum:)"
    elsif is_resource_ref(my.type)
        return "ResourceRef"
    else 
        abort("Unknown type:'$(type)'  Line:$(line)")
    endif
endfunction

function get_virtual(method)
    if (defined(my.method.virtual)&my.method.virtual="true") | (defined(my.method.override)&my.method.override="true")
        return "virtual "
    else
        return ""
    endif
endfunction

function get_params(method)
    _params=""
    for my.method.parameter
         _params+=","
        _params+="$(get_type_name(type):) $(name:)"
    endfor
    return _params
endfunction

function get_const(method)
    _const=""
    if defined(my.method.const) & my.method.const="true"
        _const=" const"
    endif
    return _const    
endfunction

function get_target_params(method)
    _params=""
    for my.method.parameter
        if !first()
         _params+=","
        endif
        if is_string(type)
          _params+="Urho3D::String($(name:))"
        else
          _params+="$(name:)"
        endif         
    endfor
    return _params
endfunction

function get_wrapper_return_type(method)
    if defined(my.method.return_type)
        if is_string(my.method.return_type)
            return "const char* "
        else
            return get_type_name(my.method.return_type)
        endif
    else
        return "void"
    endif
endfunction


function get_tag_text(tag)
    return "$(string.trim (my.tag.?''):no,left)"
endfunction

.endtemplate
.output "$(output_folder:)Generated/gen-comps-binding.cpp"
.template 1

#include "../DotNet/AllUrho.h"
#include "ComponentExporter.h"

#include "../DotNet/interop.h"
using namespace Urho3D;
extern "C" {
.for component
. if !defined(componentType)
.   component.componentType="Component"
. endif
. for field by name
.  field.expose = !defined(field.expose) | field.expose="true"
.  field.visibility = field.visibility ? "public"
.  if field.type="resource_ref" & !defined(field->gettersetter)
.  # always use gettersetter for resource_ref
.    new field.getterSetter
.    endnew
.  endif
.  if defined(field->getterSetter)
. # ------ GETTER SETTER -----------
.    new component.method
.      methodname = "$(field->getterSetter.getter_name ? ("Get"+field.Name))"
.      define method.name=methodname
.      define method.return_type="$(get_type_name(field.type))"
.      define method.const="true"
.      define method.is_getter="true"
.      define method.field_name="$(field.name:)"
.      field.gettername=methodname
.    endnew
.    new component.method
.      methodname = "$(field->getterSetter.setter_name ? ("Set"+field.Name))"
.      define method.name=methodname
.      define method.is_setter="true"
.      define method.field_name="$(field.name:)"
.      field.settername=methodname
.      new method.parameter
.        define parameter.name="value"
.        define parameter.type="$(get_type_name(field.type))"
.      endnew
.    endnew
.  else
.  echo "NO GETTER: $(field->getterSetter.getter_name?"")"   
.  endif
.  if !defined(type)
.   abort("No type for field:$(name) $(line)")
.  endif
.
.# ------- DEFAULT-VALUES -------
. endfor
. for method
.  method.visibility = method.visibility ? "public"
. endfor

DllExport int
$(name:)_GetType ($(name:) *_target)
{
    return (_target->GetType ()).Value ();
}


DllExport const char *
$(name:)_GetTypeName ($(name:) *_target)
{
    return stringdup((_target->GetTypeName ()).CString ());
}


DllExport int
$(name:)_GetTypeStatic ()
{
    return ($(name:)::GetTypeStatic ()).Value ();
}


DllExport const char *
$(name:)_GetTypeNameStatic ()
{
    return stringdup(($(name:)::GetTypeNameStatic ()).CString ());
}


DllExport void *
$(name:)_$(name:) (Urho3D::Context * context)
{
    return WeakPtr<$(name:)>(new $(name:)(context));
}

. for method where visibility?="public"
    // $(get_tag_text(method))
DllExport
$(get_wrapper_return_type(method)) $(component.name:)_$(name:)($(component.name:)* target $(get_params(method))){
.  if defined(method.return_type)
    return target->$(name:)($(get_target_params(method)));
.  else
    target->$(name:)($(get_target_params(method)));
.  endif
}
. endfor


.endfor
}



.endtemplate
