.template 0
echo "processing urho3d-components-dotnet $(switches.topdir?"notopdir")"
function is_primitive(type)
    result = my.type="int"|my.type="float"|my.type="bool"
    return result
endfunction

function is_vector(type)
    return string.prefixed(my.type,"vector")
endfunction

function is_string(type)
    return string.prefixed(my.type,"string")
endfunction

function is_enum(type)
  return my.type="enum"
endfunction

function is_resource_ref(type)
  return my.type="resource_ref"
endfunction

function get_type_name(type,cstring)
    my.cstring=my.cstring?"1"

    if !defined(my.type)
        return "void"
    elsif is_primitive(my.type)
        return my.type
    elsif is_vector(my.type) 
        return "$(my.Type)"
    elsif is_string(my.type)
        if my.cstring="1"
            return "const char*"
        else
            return "string"
        endif
    elsif is_enum(my.type)
        return "$(enum:)"
    elsif is_resource_ref(my.type)
        return "ResourceRef"
    else 
        abort("Unknown type:'$(type)'  Line:$(line)")
    endif
endfunction

function get_return_type(method)
    if !defined(my.method.return_type)
        return "void"
    else
        return get_type_name(my.method.return_type,"0")
    endif
endfunction

function get_native_type(type)
    if !defined(my.type)
        return "void"
    elsif is_string(my.type)
        return "IntPtr"
    else
        return get_type_name(my.type)
    endif
endfunction

function get_native_return_type(method)
    if !defined(my.method.return_type)
        return "void"
    else
        return get_native_type(my.method.return_type)
    endif
endfunction

function get_virtual(method)
    if (defined(my.method.virtual)&my.method.virtual="true") | (defined(my.method.override)&my.method.override="true")
        return "virtual "
    else
        return ""
    endif
endfunction

function get_params(method,firstcheck,cstring)
    my.firstcheck=my.firstcheck?"0"
    echo "firstcheck:$(my.firstcheck)"
    _params=""
    for my.method.parameter
        if !first() | my.firstcheck="0"
            _params+=","
        endif
        _params+="$(get_type_name(type,my.cstring):) $(name:)"
    endfor
    return _params
endfunction

function get_const(method)
    _const=""
    if defined(my.method.const) & my.method.const="true"
        _const=" const"
    endif
    return _const    
endfunction

function get_target_params(method,firstcheck,wrapstring)
    _params=""
    my.wrapstring=my.wrapstring?"1"
    my.firstcheck=my.firstcheck?"0"
    for my.method.parameter
        if !first() | my.firstcheck="0"
        _params+=","
        endif
        if is_string(type) & my.wrapstring="1"
            _params+="Urho3D::String($(name:))"
        else
            _params+="$(name:)"
        endif         
    endfor
    return _params
endfunction

function get_field_setter_parameter(field)
    return "$(get_type_name(field.type):) $(field.name)"
endfunction

function get_wrapper_type(type)
    if defined(my.type)
        if my.type="bool"
            return "int"
        elsif is_string(my.type)
            return "const char* "
        elsif is_vector(my.type)
            return "Interop::$(get_type_name(my.type))"
        else
            return get_type_name(my.type)
        endif
    else
        return "void"
    endif
endfunction


function get_wrapper_return_cast(type, innercall)
    if is_string(my.type)
        return "stringdup($(my.innercall:).CString())"
    elsif is_vector(my.type)
        return "*((Interop::$(get_type_name(my.type))  *) &( $(my.innercall:) ))"
    else
        return "$(my.innercall:)"
    endif
#    return "$(my.innercall:)"
endfunction

function get_wrapper_return_type(method)
    if defined(my.method.return_type)
        return get_wrapper_type(my.method.return_type)
    else
        return "void"
    endif
endfunction

function dotnet_get_component_type(comp_type)
    if !defined(my.comp_type)
        return "Component2"
    elsif my.comp_type="Object"
        return "UrhoObject"
    else
        return "$(my.comp_type:)"
    endif
endfunction

function get_tag_text(tag)
    return "$(string.trim (my.tag.?''):no,left)"
endfunction

.endtemplate
.output "$(output_folder:)Generated/gen-comps-binding.cpp"
.template 1

#include "../DotNet/AllUrho.h"
#include "gen-comps.h"
#include "../DotNet/interop.h"
using namespace Urho3D;
extern "C" {
.for component
. if !defined(componentType)
.   component.componentType="Component"
. endif
. for field by name
.  field.expose = !defined(field.expose) | field.expose="true"
.  field.visibility = field.visibility ? "public"
.  if field.type="resource_ref" & !defined(field->gettersetter)
.  # always use gettersetter for resource_ref
.    new field.getterSetter
.    endnew
.  endif
.  if defined(field->getterSetter)
. # ------ GETTER SETTER -----------
.    new component.method
.      methodname = "$(field->getterSetter.getter_name ? ("Get"+field.Name))"
.      define method.name=methodname
.      define method.return_type="$(get_type_name(field.type))"
.      define method.const="true"
.      define method.is_getter="true"
.      define method.field_name="$(field.name:)"
.      field.gettername=methodname
.    endnew
.    new component.method
.      methodname = "$(field->getterSetter.setter_name ? ("Set"+field.Name))"
.      define method.name=methodname
.      define method.is_setter="true"
.      define method.field_name="$(field.name:)"
.      field.settername=methodname
.      new method.parameter
.        define parameter.name="value"
.        define parameter.type="$(get_type_name(field.type))"
.      endnew
.    endnew
.  else
.  echo "NO GETTER: $(field->getterSetter.getter_name?"")"   
.  endif
.  if !defined(type)
.   abort("No type for field:$(name) $(line)")
.  endif
.
.# ------- DEFAULT-VALUES -------
. endfor
. for method
.  method.visibility = method.visibility ? "public"
. endfor

DllExport int
$(name:)_GetType ($(name:) *_target)
{
    return (_target->GetType ()).Value ();
}


DllExport const char *
$(name:)_GetTypeName ($(name:) *_target)
{
    return stringdup((_target->GetTypeName ()).CString ());
}


DllExport int
$(name:)_GetTypeStatic ()
{
    return ($(name:)::GetTypeStatic ()).Value ();
}


DllExport const char *
$(name:)_GetTypeNameStatic ()
{
    return stringdup(($(name:)::GetTypeNameStatic ()).CString ());
}


DllExport void *
$(name:)_$(name:) (Urho3D::Context * context)
{
    return WeakPtr<$(name:)>(new $(name:)(context));
}

. for method where visibility?="public"
    // $(get_tag_text(method))
DllExport
$(get_wrapper_return_type(method)) $(component.name:)_$(name:)($(component.name:)* target $(get_params(method))){
.  if defined(method.return_type)
.   method.inner = "target->$(name:)($(get_target_params(method,"1"):))"
.   echo "Inner $(inner:)"
.   result = get_wrapper_return_cast(method.return_type,"$(method.inner:)")
    return $(result:);
.  else
    target->$(name:)($(get_target_params(method,"1")));
.  endif
}
. endfor # method
//fields
. for field where visibility?="public"
    // $(get_tag_text(field))
DllExport
$(get_wrapper_type(type)) $(component.name:)_GET_$(name:)($(component.name:)* target){
.   field.inner = "target->$(name:)"
.   result = get_wrapper_return_cast(type,"$(field.inner:)")
    return $(result:);
}

DllExport
void $(component.name:)_SET_$(name:)($(component.name:)* target, $(get_type_name(type)) $(name:)){
    target->$(name:)=$(name:);
}

. endfor # field

.endfor # component
}



.endtemplate

.# ------ dotnet cs-wrapper ----

.# create dotnet-folder
.if !defined(directory.open("Generated/DotNet"))
. directory.create("$(output_folder:)Generated/DotNet")
.endif

.for component
.output "$(output_folder:)Generated/DotNet/$(name:).cs"
.template 1
// WARNING - AUTOGENERATED - DO NOT EDIT
// 
// Log.cs
// 
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using Urho.Urho2D;
using Urho.Gui;
using Urho.Resources;
using Urho.IO;
using Urho.Navigation;
using Urho.Network;

namespace Urho.Custom
{
 
	/// <summary>
	/// $(get_tag_text(component))
	/// </summary>
	public unsafe partial class $(name:) : $(dotnet_get_component_type(componentType):)
    {
		unsafe partial void On$(name:)Created ();

		[Preserve]
		public $(name:) (IntPtr handle) : base (handle)
		{
			On$(name:)Created ();
		}

		[Preserve]
		protected $(name:) (UrhoObjectFlag emptyFlag) : base (emptyFlag)
		{
			On$(name:)Created ();
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int $(name:)_GetType (IntPtr handle);

		private StringHash UrhoGetType ()
		{
			Runtime.ValidateRefCounted (this);
			return new StringHash ($(name:)_GetType (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr $(name:)_GetTypeName (IntPtr handle);

		private string GetTypeName ()
		{
			Runtime.ValidateRefCounted (this);
			return Marshal.PtrToStringAnsi ($(name:)_GetTypeName (handle));
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern int $(name:)_GetTypeStatic ();

		private static StringHash GetTypeStatic ()
		{
			Runtime.Validate (typeof(Log));
			return new StringHash ($(name:)_GetTypeStatic ());
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr $(name:)_GetTypeNameStatic ();

		private static string GetTypeNameStatic ()
		{
			Runtime.Validate (typeof(Log));
			return Marshal.PtrToStringAnsi ($(name:)_GetTypeNameStatic ());
		}

		[Preserve]
		public $(name:) () : this (Application.CurrentContext)
		{
		}

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr $(name:)_$(name:) (IntPtr context);

		[Preserve]
		public $(name:) (Context context) : base (UrhoObjectFlag.Empty)
		{
			Runtime.Validate (typeof(Log));
			handle = $(name:)_$(name:) ((object)context == null ? IntPtr.Zero : context.Handle);
			Runtime.RegisterObject (this);
			On$(name:)Created ();
		}

. for method where visibility?="public"
		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern $(get_native_return_type(method)) $(component.name:)_$(name:) (IntPtr handle $(get_params(method,"0","0")) );

		/// <summary>
		/// $(get_tag_text(method))
		/// </summary>        
		public $(get_return_type(method)) $(name:) ($(get_params(method,"1","0")) )
		{
			Runtime.ValidateRefCounted (this);
. if defined(method.return_type)
.  if method.return_type="string"
            return Marshal.PtrToStringAnsi ($(component.name:)_$(name:) (handle $(get_target_params(method)) ));
.  else
            return $(component.name:)_$(name:) (handle $(get_target_params(method,"0","0")) );
.  endif
. else
                $(component.name:)_$(name:) (handle $(get_target_params(method,"0","0")) );
. endif            
		}
. endfor


. for field where visibility?="public"
		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern $(get_native_type(type)) $(component.name:)_GET_$(name:) (IntPtr handle);

		[DllImport (Consts.NativeImport, CallingConvention = CallingConvention.Cdecl)]
		internal static extern void $(component.name:)_SET_$(name:) (IntPtr handle, $(get_field_setter_parameter(field))  );

		public $(get_type_name(field.type)) $(Name) {
			get{ return $(component.name:)_GET_$(name:)(handle);}
			set{ $(component.name:)_SET_$(name:) (handle,value);}
		}

. endfor

    }
}
.endtemplate
.endfor






